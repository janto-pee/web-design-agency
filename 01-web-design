introduction
hello guys and welcome to this tutorial, in this tutorial, you will build this responsive portfolio website with vue.js
0:08
now, Whether you're a newbie developer, or this is your first time coming across Vue.js 
0:13
or you may even be a busy developer looking to develop your next project with vue.js, surely
0:13
there is something for you. and by the way, this website is mobile responsive.
0:43
meaning, it will provide your users with the best experience no matter which device they use
0:13
Now, This project const of this beautiful
0:19
hero section, a service section that lists a couple of service, a project portfolio section showing a list of projects completed, 
0:25
a blog section and a contact section.
0:25
And at the end of this project, you will deploy to cloudflare

0:39
Let’s take a look at the structure of this tutorial.
0:46
You will start with vue project architecture and setup, So I'll explain some very basic concepts of vue.js
0:25
such as project initiation with vite, installation of essential dependencies, dev dependencies and more
0:52
then we'll move to the project layout, creating pages and routes
0:59
At the end of this tutorial you'll learn tailwindcss, vue routing, deployment and more
1:07
So it's absolutely a loaded project and I really hope you enjoy it and get lots of value.
1:07
Before we dive in, the assets used in this project can be found on my github repo with link below
1:07
so feel free to clone this github repo and don't forget to give a star.
1:07
Without further delay, let's jump in




Setup
4:40
Create a new empty folder on your desktop,
6:56
let's call this portfolio app. I will be using vscode as my editor and you can do so too. 
7:02
if you're new to web development Visual Studio code is the most popular editor out there it has a built-in
7:09
terminal as well as a host of different extensions and shortcuts that
7:14
you can use, so if you don't have it already,  download it for your own operating system and install
7:20
another important thing you need before we begin is node.js
7:20
node.js is a JavaScript runtime environment that's going to allow us run and
7:28
create our project so download the recommended version for your own operating system once you've done that
4:48
simply right click, open in terminal, type code . and enter to enter vscode. maximize the interface to full screen
7:34
or you can simply drag and drop the empty folder into an empty Visual Studio code window once you're here you can go to
7:41
view and then terminal to open Visual Studio codes built-in terminal to create
7:47
our application we're going to use a tool called Veet the only thing you have to do to get started is initialize our app
5:07
Vite is a build tool that aims to provide a faster and leaner development experience for modern web projects
5:14
vite consists of two major parts:
5:19
A dev server that provides rich feature enhancements over native ES modules, for example extremely fast Hot Module Replacement (HMR).
5:26
A build command that bundles your code with Rollup, pre-configured to output highly optimized static assets for production.
and don't worry if you don't have any experience with vite so far you can click getting started right here which is
5:34
going to teach you about instllation, what's possible in the Vite Features Guide. Support for frameworks and more.
5:59
so let's go ahead and click get started and we can immediately move to
6:05
installation. I don't want you to mindlessly copy and paste
6:12
any commands that I give you instead, I want to point you to the right documentation Pages because that's
6:18
what's going to make you the best developer there is being able to understand the docs and become
6:24
independent so let's go ahead and copy this Command right here npm create vite@latest go back to our
6:32
terminal paste it and press dot slash to create it in the current repository now



6:39
this is going to ask you whether you want to install the create-vite-app in this case to which you're going to
6:45
say why yes and then it's going to open up a questionnaire to set up our
6:50
application in this case, vite ask to select a framework, select Vue
we will use typescript but once again don't be scared if you haven't used it before
6:56
we're going to start easy with Typescript this time just to to allow you to dip your toes if you haven't used it before
7:02
so let's select Typescript variant. vite has successfully scafolded our app in little to no time
8:11
let's take a look at the initial folder structure that was created for us on initialization
8:18
let's start with the folder that matters the most,
8:26
we have our favicon that displays on the browser tab we
8:31
have the global. CSS the App.vue, style.css, main.ts, .gitignore, tsconfig file
8:44
if you open the App.vue file, this is the entry point for our app and it has a component file called Hello.
7:09
now lets run npm install to install the dependency and npm run dev.


7:15
you're going to create the entire UI of this application using Tailwind so just like we did for vite, 
7:21
lets visit the tailwind docuentation to see how to add tailwind to our project. As you can see, 
7:41
we have already completed the first step which is to create the react project with vite.
7:41
Next is to install tailwindcss by coping the commands npm install -D tailwindcss postcss autoprefixer npx tailwindcss init -p and paste on the terminal
7:41
Next step is to configure your template paths, Add the paths to all of your template files in your tailwind.config.js file.
7:41
step 4 is to  Add the Tailwind directives to your CSS and Add the @tailwind directives for each of Tailwind’s layers to your ./src/index.css file.
7:41
before we run the development server, lets use some tailwind classes in our app.tsx file.
7:41
now you can clear your terminal by running clear and then run mpm run Dev
7:47
this is going to spin up our application on Local Host 5217 and then simply hold
7:52
control or command and click this link it's going to open it up right within
7:57
your browser and you'll have a this beautiful looking starter interface 




8:44
we can remove everything, delete the HelloWorld as well, 
8:44
that's going to say hello world and it's going to have a class name equal to text- bold text- teal 500
8:55
and if we save it if you go back you should be able to see something that looks like this a lot of weird lines
9:01
going around our screen but then on top we indeed do have a teal hello world
9:07
this means that Tailwind is working but still some basic default styles from the nextg starter are being applied and we
9:15
want to fix them together so immediately you can head to the style. CSS remove everything from here and then

To make our life easy, lets install the Tailwind wind CSS intellisence extension within the Visual Studio code  extension tab
12:11
it's going to tell you exactly which CSS properties each class is applying so if you're new to Tailwind
12:11
it's going to be quite useful 
12:11
I have it installed already, so i will proceed to the App.vue file,


10:07
Also, the second customization that's going to support our global. CSS are custom colors in the Tailwind dot config file 
10:07
which can be found in the same GitHub repo, 
10:07
you will see the colors that we're going to use within our application, 
10:07
so every time you want to use this variant of green you don't
10:07
have to spell it out but rather you text secondary 50 as simple as that and
10:07
this concept is called theming within Tailwind
10:07
now copy the starting from the extend and paste in our tailwind.config.js file
10:07
The advantage of this is that we can change the secondary and primary colors at once in a single tailwind dot config file



  
12:11
let's put our editor side by side by our browser so that we can see the changes we make live 
12:11
there we go and we can see our hello world let's also provide it a text-secondary-500 which is just going to
12:11
change the text color to the secondary color . 
12:11
it's going to be quite useful but with that said we are ready to start creating the base file and
12:17
folder structure of our application so what exactly is the start well we of
12:23
course have to start by configuring routing










Components setup(348 - 394)
32:25
First things first, let's setup our folder structure before we configure routing.
14:15
inside of the source folder, let's create a folder called components. the compoenents folder 
14:15
will contains the indivual section that make up the web page.
14:15
let's create a folder inside of the component called hero, inside this hero, lets create hero.vue
14:15
Now run vueinit for vue boilerplate code.
14:15
So lets create folder for other sections.
14:15
Now run vueinit to get react arrow function short code
14:15
vueinit is made available by a vscode extension called vue3 snippets. 
14:15
if you dont have it installed, please install now to be able to use vue snippets
14:15
So lets create folder for other sections.


14:15
let's create a folder called Service, and inside Service create Service.tsx, 
14:15
create blog folder and inside this blog, lets create blog.tsx.
14:15
create project folder, then project.tsx
14:15
create contact folder, inside create contact.tsx, 
14:15
we can even have files in  folder, for instance, 
14:15
inside of the Her, create Navbar.vue and Footer.vue file
Now we have our components.
14:15
under the src directory, just like we created the component folder, lets create views folder.


32:25
the views folder will contain the different pages or routes for the web app.
32:25
in our case, the view will have two pages. first is the Home page. Let's create home, then home.vue
32:20
and now in home, let's import our component inside one by one, and we'll do this by
33:30
first: inside of the script tag, we'll say import NavbarComponent from components/Hero/Navbar.vue';
33:30
in mycase, i have the automatic import working but if it doesn't, 
33:30
you can manually type import Home from Components/Hero/Navbar
33:30
have the Hero also self closing, let's imports others
33:36
we'll say import NavbarComponent from components/Hero/Navbar.vue';
33:36
we'll say import HeroComponent from components/Hero/Navbar.vue';
33:36
we'll say import ServiceComponent from components/Hero/Navbar.vue';
33:36
we'll say import ProjectComponent from components/Hero/Navbar.vue';
33:36
we'll say import BlogComponent from components/Hero/Navbar.vue';
33:36
we'll say import ContactComponent from components/Hero/Navbar.vue';
33:36
we'll say import FooterComponent from components/Hero/Navbar.vue';
33:36
now how do you we use this imported component, inside of the template tag, we will say 
33:02
open tag, navbar-component as a self closing tag
33:42
so let's repeat this for the other components.
34:01
and this is it so these seven pieces of
34:08
text will soon become the entire application that you can see right here on the screen so what we can do is get
34:15
and again inside the views, create a folder caled NotFound, inside Notfound, create Notfound.vue




14:15
Now that we have the pages set up, lets confiure routing. First thing, under source, create a folder called index.ts
14:15
we can see the red line here, which means something is wrong. In this case, 
14:15
only the vue extension is allowed in this component but not ts, to allow it, 
14:15
let's go inside the app.config.ts and set allowJs: true
14:15
back to the index.ts, this is where we will write all routing logic


14:15
step 1) Just like we have in the vue router documentation, lets copy these import statement and paste in the index file
14:15
lets import our two views file, import Home from viewa/Home, then import NotFound from views/NotFound
14:15
for the home, specify the path, name and element.
14:15
for the not found, specify the path, name and component.
14:15
step2) Inside of the main.tsx, lets import the router and use as a middle ware.
14:01
and this means that we are ready to get started with the development to be able
14:07
to see the changes that we make in our code live we can put our browser side by side with the editor there we go we are
14:15
ready to start with component setup





Navbar
Before the begin the navbar
16:10
let's create an HTML 5 semantic nav tag our nav is going
16:16
to have a class name equal width full, background neutral 900, and set the text to be white.  
16:24
r-500, within it, we can create a div container and give it a class of width full which stands for full width, p-6 to add a padding of 1.5rem on all sides. on a large screen, lets set px-8 and on extra largescreen, let set px to 16, which is to add a padding of 4rem on the left and right
16:38
let have a div with a class of display flex, align all items center and justify 
16:45
justify contents between. we can also give a gap of 2. Inside here, we will have 3 items, the navicon and the right links with button
16:50
we are starting to create the basic structure for what's yet to become our navigation bar within it we can create
16:58
our first link a link pointing to home so what we can do is simply create
17:04
a link component and again we have to import this from react router so simply double
17:10
click it press control or command space and then press enter which is going to automatically import it from react router link
17:17
if the automatic import didn't work simply manually type import link from react router link.
Hoever, this is not the typycal routing link. If you notice on this demo, instead of routing a separate page as seen in the url, it routes to a specific component on the same page.
17:25
every link needs to have an href meaning where is it pointing and in this case it's going to point to just forward slash meaning the homepage
17:32
within it we don't simply want to say home right that's not cool what we want to do is show the logo of our
17:39
application or the name of our app. what would be the easiest way for me to give you the assets right there's going to be a
17:46
lot of these assets and images that combine and create this application so
17:51
for you to be able to get them I'm going to give you a zipped public folder within the description of this video so
17:58
simply copy that folder unzip it and then paste it right here in the root of
18:03
our application but before delete the existing public folder and then simply
18:09
paste it right here the new public folder is going to have a lot of different icons and images and assets
18:15
that we're going to use to make this application come to life so now instead of home we can rather render an image
Let provide the image source of SL High link which is the name
18:52
of our application- logo. SVG we we can also give it an alt tag of
18:59
logo and add tailwindcss classes to style the image
19:05
let's give it a width of w-8, on large scre, lets make it w-12, rounded-full to make
19:13
give a border radius of 1/2 and border. let give it a border-neutral -500 
19:20
we can also add the name of the portfolio usingspan Rapid Startup then close the span tag (Emojipedia)
19:38
notice how the deployed website has this cool little icon on top that's called a
19:43
favicon and since we imported our public folder you also have access to it so how
19:49
do you set it up well delete this favicon right here and then within the public folder you can notice you have
19:56
another favicon here so simply drag it to your app and immediately the change is going
20:02
to be reflected now just. now, lets create the right part of the navbar. let me create a div with a class of d-flex to display flex on all screen, gap 8 , align items center, and a text color of text-neutral-500
we are going to have three components here. The navlink, the buttons and the mobile toggle icon.
20:15
lets create a div to serve as an unordered list to wrap our list of links. let give it a 
20:21
class name equal to hidden usually it's going to be hidden on small screens but display flex on extral large screen
20:26
a gap of 4 and on 2xl:gap of 8. 12 so we create some spacing between the elements and then on
20:31
large devices it's going to be Flex meaning it's going to be visible on large devices let me show you what I
20:38
mean on the displayed application you cannot see the links here but as you expand it to large screen you can see
20:45
all of these amazing links appear so that's exactly what we have done with this UL by giving it a hidden property
20:51
and then Flex on large devices responsiveness is so easy with Tailwind
20:57
now here here we have a lot of these links that we want to Loop over and what you could do is technically create an
21:04
array right here and then say something like you could copy all of these so you
21:10
can take them and paste them right here and then you could map over them but we
21:15
never want to mix some data which is this right here with our presentation
21:21
which is the UI that we have here so what I would do instead is create
21:26
something known as a constants or data folder so let's go to our files and folders
21:31
collapse everything and create a new folder called
21:37
data and then within it a new index.ts in the GitHub gist that you
21:43
visited before you can find the complete data.ts file simply copy it and
21:49
paste it here once again trust me this is nothing useful this is just some data
21:54
we're mapping over so let me show you what we're going to use right now now we're going to use these nav links this
22:01
is simply an array of links that contain the href the key and then the label and
22:08
instead of having all of these links appear immediately here within your application we can rather put them in a
22:15
new file and then reference them so here we can take these nav links go back to
22:20
our application use curly braces and then within we can say nav links we can
22:27
import them from add SL data at the top and then we can say do map where we
22:34
get each individual link and for each one we can immediately return something so keep in mind here is not a curly
22:41
brace rather it's just a parenthesis which means that we have an immediate return so what are we returning for each
22:47
one of these links well it's going to be a link component that's going to have an
22:54
href equal to link. href it's going to have a key equal to link. key and it's
23:02
going to say something like link. label so now if we save this and go back to
23:22
this together for now we can continue creating this structure and then later we can revisit this are err and I can
23:28
explain what it is about and if it appear for you simply close it for now right here so now we're
23:35
mapping over our links but we also want to give them some styling so what we can do is give it a class
23:42
name and that class name is going to be equal to Center cursor Das pointer to
23:57
indicate that it is clickable
24:03
transition all and then on Hover text neutral-100 so now you can see that
24:10
these look a bit different and once you hover it actually looks great 
24:34
we can see all the links on the right side what is missing though is this button that you
24:41
can see right here to log in so we're going to add that right here below the
24:47
div link by creating a contact Link and that Link is going to have a
24:52
class name of hidden to hide on small screen, xl flex, to display flexon extra large screens, px-8 which is a paddingof 2rem on the left and right, while py-4 which is a paddingof1rem on top andbottom. Then (box shadow)
24:58
Let create a mobile nav icon on small screens with buttons with a class of xl:hidden 
to hide it on xl screeens. This button will only be seen on screen sizes less than xl.
25:06
Ifyou notice in the demo, we have this beautiful menu bar icon, to get this, lets go to hero icon, search for Bars3Icon, copy Paste this, react should provide intellisense whether solid or outline. select the outline andclose the tag. lets give the icon a class of w-6, h-6, and text secondary-500
31:21
we have right here on larger devices as well but with that said our navigation
31:26
bar is now done and we can close it I often use the control W or command W to
31:32
close a tab so I'm going to use that to close the button and the Navar and now
31:38
(mobile nav)





Hero section

Hero section
34:23
section we can wrap it in just that a div thisdiv is going to have a class
34:30
name let's do a background and background of neutral 900 just so we can see the
34:36
section and let's create a container div and give a class of full width , maximum width 7xl, mx-auto to centralize the div left and right, a padding of 4 on the left and right and a padding of 0 on large screen.
20 so as you can see we have added a lot of different responsive classes to this so we sure it looks good on all
35:14
and you can see how this section looks like right now because of these
53:26
different kinds of devices notice how it doesn't go full width this is this Max
53:32
container it's never going to take full width of the screen rather it's going to leave some space on the left and the
53:38
right so now within this section we can have a div and this div is going to have
53:43
a class name of flex flex-col so the
34:53
elements appear in a column on small to medium screen, flex-row on large screen, 
35:01
justify between to separted element apart. we can give it a gap of 4 to provide some 
35:07
spacing between the elements on small screeens and gap of 8 on large screens and 12 
35:07
on extra large screens. let's give a  padding y of 10 and on large screen, lets give 
35:07
it a padding y of 28. we can also give it a border, let set the border color to border black
54:31
let's tart with the left column by creating a div with a class of lg:basis-3/5 to give the flex basis on the left will be 3/5 and py-10 for padding top and bottom. going to be 640 pixels so this ensures that it looks good on mobile like it
54:37
let have our first subtitlte h5 with a class of text-neutral 400 and text WELCOME TO MY WORLD. 
for this hand emoji, got to emojipedia.com, copy and paste. as simple as ABC.
54:42
under the h5, let have a div with a class of text-4xl on small screens, while on medium screens let use text-6xl, let's make tyhe font color text-neutral-50 across all screen and give it a font weight of bold and margin top of 8
54:47
inside of this div, let have an h2 with a class of my 4 that going to say Hi, I'm Janto pee.
in order to change the color of an inner text, we can wrap it with a span tag with a class of text-secondary-500 and as you can see the result in the browser.

Dependency installation
We need to install some essential dependencies and their types. copy the list of dependencies from the github file and 
12:29
type npm install copy and paste the dependencies here and enter to install
12:35
Now, let install the development dependencies. if you dont know what dev dependencies are. 
DevDependencies are a special category of npm packages that are only needed during the development phase of your project.
They wont be needed in production. An example is tailwindcss, When you build your React application for production, 
the Tailwind CSS styles will be compiled into regular CSS. THe regular css is what the browsers use for styling.
But in development, we need the DevDependencies. so copy the devDependencies from the folder and install
12:42
type npm install copy and paste the dev dependencies here --save-dev and enter to install
12:47
let's configure routing using react-router-dom. if this is your first time using react router dom, 
React Router DOM is an npm package that enables you to implement dynamic routing in a web app. 
It allows you to display pages and allow users to navigate them












Skills section (165)
51:39
to implement something that looks like this and does this look great so we're going to have these images and no this
51:46
text is not a part of the image we are going to place it there and then we have another one so it appears like we can
51:52
scroll through it and then we even have another overlay showing on top of these
51:58
two images this is quite an exciting section it feels like animations would come in handy right here so if you want
52:05
me to implement some animations let me know because I can already see how these
52:10
elements would fly around if we had some so now let's collapse
52:15
this on mobile you can see we try to make the best of it it still functions right even though you might think oh how
52:21
are we going to display this in Mobile we can do that as you can see here so let's focus on developing the
52:29
camp section next there will be some relative and absolute positioning but don't worry we're going to make it
52:35
happen to get started with our camp section we're also going to convert it into a section so right here we can wrap
52:42
everything in a section and give it a class name equal to we're again going to
52:48
start with a border of two and Border let's do green this time 500 just so we